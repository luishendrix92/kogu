{
  "type": "File",
  "start": 0,
  "end": 858,
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 33,
      "column": 0
    }
  },
  "program": {
    "type": "Program",
    "start": 0,
    "end": 858,
    "loc": {
      "start": {
        "line": 1,
        "column": 0
      },
      "end": {
        "line": 33,
        "column": 0
      }
    },
    "sourceType": "module",
    "body": [
      {
        "type": "ExportNamedDeclaration",
        "start": 804,
        "end": 857,
        "loc": {
          "start": {
            "line": 30,
            "column": 0
          },
          "end": {
            "line": 32,
            "column": 1
          }
        },
        "specifiers": [],
        "source": null,
        "declaration": {
          "type": "FunctionDeclaration",
          "start": 811,
          "end": 857,
          "loc": {
            "start": {
              "line": 30,
              "column": 7
            },
            "end": {
              "line": 32,
              "column": 1
            }
          },
          "id": {
            "type": "Identifier",
            "start": 820,
            "end": 828,
            "loc": {
              "start": {
                "line": 30,
                "column": 16
              },
              "end": {
                "line": 30,
                "column": 24
              },
              "identifierName": "identity"
            },
            "name": "identity",
            "leadingComments": null
          },
          "generator": false,
          "expression": false,
          "async": false,
          "params": [
            {
              "type": "Identifier",
              "start": 829,
              "end": 834,
              "loc": {
                "start": {
                  "line": 30,
                  "column": 25
                },
                "end": {
                  "line": 30,
                  "column": 30
                },
                "identifierName": "value"
              },
              "name": "value"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "start": 836,
            "end": 857,
            "loc": {
              "start": {
                "line": 30,
                "column": 32
              },
              "end": {
                "line": 32,
                "column": 1
              }
            },
            "body": [
              {
                "type": "ReturnStatement",
                "start": 842,
                "end": 855,
                "loc": {
                  "start": {
                    "line": 31,
                    "column": 4
                  },
                  "end": {
                    "line": 31,
                    "column": 17
                  }
                },
                "argument": {
                  "type": "Identifier",
                  "start": 849,
                  "end": 854,
                  "loc": {
                    "start": {
                      "line": 31,
                      "column": 11
                    },
                    "end": {
                      "line": 31,
                      "column": 16
                    },
                    "identifierName": "value"
                  },
                  "name": "value"
                }
              }
            ],
            "directives": []
          },
          "leadingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * @desc\n * undefined\n * @lineNumber\n * 20\n * @param\n * {T} value\n * @return\n * {T}\n ",
              "start": 0,
              "end": 91,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 0
                },
                "end": {
                  "line": 10,
                  "column": 3
                }
              }
            },
            {
              "type": "CommentBlock",
              "value": "*\n * @desc\n * Returns the first argument passed to it and ignores the rest.\n *\n * It may not seem useful at first, but you can use it in a pipeline\n * or think of it as the absolute unit of **function composition**.\n * For example, you can implement `compose` in the **Haskell**\n * language using `id`: `compose = foldl (.) id` since `(.)`\n * is an infix binary function (takes only two arguments).\n * @example\n * const refObj = { prop: \"Value\" };\n *\n * filter(identity)([true, false]) //> [true]\n * identity(refObj) === refObj //> true\n * identity(5) //> 5\n * @see https://en.wikipedia.org/wiki/Identity_function\n * @param {T} value - The value to return.\n * @return {T}      - The value that you passed.\n ",
              "start": 92,
              "end": 803,
              "loc": {
                "start": {
                  "line": 11,
                  "column": 0
                },
                "end": {
                  "line": 29,
                  "column": 3
                }
              }
            }
          ],
          "trailingComments": []
        },
        "leadingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * @desc\n * undefined\n * @lineNumber\n * 20\n * @param\n * {T} value\n * @return\n * {T}\n ",
            "start": 0,
            "end": 91,
            "loc": {
              "start": {
                "line": 1,
                "column": 0
              },
              "end": {
                "line": 10,
                "column": 3
              }
            }
          },
          {
            "type": "CommentBlock",
            "value": "*\n * @desc\n * Returns the first argument passed to it and ignores the rest.\n *\n * It may not seem useful at first, but you can use it in a pipeline\n * or think of it as the absolute unit of **function composition**.\n * For example, you can implement `compose` in the **Haskell**\n * language using `id`: `compose = foldl (.) id` since `(.)`\n * is an infix binary function (takes only two arguments).\n * @example\n * const refObj = { prop: \"Value\" };\n *\n * filter(identity)([true, false]) //> [true]\n * identity(refObj) === refObj //> true\n * identity(5) //> 5\n * @see https://en.wikipedia.org/wiki/Identity_function\n * @param {T} value - The value to return.\n * @return {T}      - The value that you passed.\n ",
            "start": 92,
            "end": 803,
            "loc": {
              "start": {
                "line": 11,
                "column": 0
              },
              "end": {
                "line": 29,
                "column": 3
              }
            }
          }
        ]
      }
    ],
    "directives": []
  },
  "comments": [
    {
      "type": "CommentBlock",
      "value": "*\n * @desc\n * undefined\n * @lineNumber\n * 20\n * @param\n * {T} value\n * @return\n * {T}\n ",
      "start": 0,
      "end": 91,
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 10,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @desc\n * Returns the first argument passed to it and ignores the rest.\n *\n * It may not seem useful at first, but you can use it in a pipeline\n * or think of it as the absolute unit of **function composition**.\n * For example, you can implement `compose` in the **Haskell**\n * language using `id`: `compose = foldl (.) id` since `(.)`\n * is an infix binary function (takes only two arguments).\n * @example\n * const refObj = { prop: \"Value\" };\n *\n * filter(identity)([true, false]) //> [true]\n * identity(refObj) === refObj //> true\n * identity(5) //> 5\n * @see https://en.wikipedia.org/wiki/Identity_function\n * @param {T} value - The value to return.\n * @return {T}      - The value that you passed.\n ",
      "start": 92,
      "end": 803,
      "loc": {
        "start": {
          "line": 11,
          "column": 0
        },
        "end": {
          "line": 29,
          "column": 3
        }
      }
    }
  ],
  "tokens": [
    {
      "type": "CommentBlock",
      "value": "*\n * @desc\n * undefined\n * @lineNumber\n * 20\n * @param\n * {T} value\n * @return\n * {T}\n ",
      "start": 0,
      "end": 91,
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 10,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @desc\n * Returns the first argument passed to it and ignores the rest.\n *\n * It may not seem useful at first, but you can use it in a pipeline\n * or think of it as the absolute unit of **function composition**.\n * For example, you can implement `compose` in the **Haskell**\n * language using `id`: `compose = foldl (.) id` since `(.)`\n * is an infix binary function (takes only two arguments).\n * @example\n * const refObj = { prop: \"Value\" };\n *\n * filter(identity)([true, false]) //> [true]\n * identity(refObj) === refObj //> true\n * identity(5) //> 5\n * @see https://en.wikipedia.org/wiki/Identity_function\n * @param {T} value - The value to return.\n * @return {T}      - The value that you passed.\n ",
      "start": 92,
      "end": 803,
      "loc": {
        "start": {
          "line": 11,
          "column": 0
        },
        "end": {
          "line": 29,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "export",
        "keyword": "export",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "export",
      "start": 804,
      "end": 810,
      "loc": {
        "start": {
          "line": 30,
          "column": 0
        },
        "end": {
          "line": 30,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "function",
        "keyword": "function",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "function",
      "start": 811,
      "end": 819,
      "loc": {
        "start": {
          "line": 30,
          "column": 7
        },
        "end": {
          "line": 30,
          "column": 15
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "identity",
      "start": 820,
      "end": 828,
      "loc": {
        "start": {
          "line": 30,
          "column": 16
        },
        "end": {
          "line": 30,
          "column": 24
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 828,
      "end": 829,
      "loc": {
        "start": {
          "line": 30,
          "column": 24
        },
        "end": {
          "line": 30,
          "column": 25
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "value",
      "start": 829,
      "end": 834,
      "loc": {
        "start": {
          "line": 30,
          "column": 25
        },
        "end": {
          "line": 30,
          "column": 30
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 834,
      "end": 835,
      "loc": {
        "start": {
          "line": 30,
          "column": 30
        },
        "end": {
          "line": 30,
          "column": 31
        }
      }
    },
    {
      "type": {
        "label": "{",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 836,
      "end": 837,
      "loc": {
        "start": {
          "line": 30,
          "column": 32
        },
        "end": {
          "line": 30,
          "column": 33
        }
      }
    },
    {
      "type": {
        "label": "return",
        "keyword": "return",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "return",
      "start": 842,
      "end": 848,
      "loc": {
        "start": {
          "line": 31,
          "column": 4
        },
        "end": {
          "line": 31,
          "column": 10
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "value",
      "start": 849,
      "end": 854,
      "loc": {
        "start": {
          "line": 31,
          "column": 11
        },
        "end": {
          "line": 31,
          "column": 16
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 854,
      "end": 855,
      "loc": {
        "start": {
          "line": 31,
          "column": 16
        },
        "end": {
          "line": 31,
          "column": 17
        }
      }
    },
    {
      "type": {
        "label": "}",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 856,
      "end": 857,
      "loc": {
        "start": {
          "line": 32,
          "column": 0
        },
        "end": {
          "line": 32,
          "column": 1
        }
      }
    },
    {
      "type": {
        "label": "eof",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 858,
      "end": 858,
      "loc": {
        "start": {
          "line": 33,
          "column": 0
        },
        "end": {
          "line": 33,
          "column": 0
        }
      }
    }
  ]
}