{
  "type": "File",
  "start": 0,
  "end": 3213,
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 134,
      "column": 0
    }
  },
  "program": {
    "type": "Program",
    "start": 0,
    "end": 3213,
    "loc": {
      "start": {
        "line": 1,
        "column": 0
      },
      "end": {
        "line": 134,
        "column": 0
      }
    },
    "sourceType": "module",
    "body": [
      {
        "type": "ExportNamedDeclaration",
        "start": 851,
        "end": 965,
        "loc": {
          "start": {
            "line": 32,
            "column": 0
          },
          "end": {
            "line": 36,
            "column": 1
          }
        },
        "specifiers": [],
        "source": null,
        "declaration": {
          "type": "FunctionDeclaration",
          "start": 858,
          "end": 965,
          "loc": {
            "start": {
              "line": 32,
              "column": 7
            },
            "end": {
              "line": 36,
              "column": 1
            }
          },
          "id": {
            "type": "Identifier",
            "start": 867,
            "end": 871,
            "loc": {
              "start": {
                "line": 32,
                "column": 16
              },
              "end": {
                "line": 32,
                "column": 20
              },
              "identifierName": "join"
            },
            "name": "join",
            "leadingComments": null
          },
          "generator": false,
          "expression": false,
          "async": false,
          "params": [
            {
              "type": "Identifier",
              "start": 872,
              "end": 878,
              "loc": {
                "start": {
                  "line": 32,
                  "column": 21
                },
                "end": {
                  "line": 32,
                  "column": 27
                },
                "identifierName": "joiner"
              },
              "name": "joiner"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "start": 880,
            "end": 965,
            "loc": {
              "start": {
                "line": 32,
                "column": 29
              },
              "end": {
                "line": 36,
                "column": 1
              }
            },
            "body": [
              {
                "type": "ReturnStatement",
                "start": 886,
                "end": 963,
                "loc": {
                  "start": {
                    "line": 33,
                    "column": 4
                  },
                  "end": {
                    "line": 35,
                    "column": 6
                  }
                },
                "argument": {
                  "type": "FunctionExpression",
                  "start": 893,
                  "end": 962,
                  "loc": {
                    "start": {
                      "line": 33,
                      "column": 11
                    },
                    "end": {
                      "line": 35,
                      "column": 5
                    }
                  },
                  "id": {
                    "type": "Identifier",
                    "start": 902,
                    "end": 908,
                    "loc": {
                      "start": {
                        "line": 33,
                        "column": 20
                      },
                      "end": {
                        "line": 33,
                        "column": 26
                      },
                      "identifierName": "join__"
                    },
                    "name": "join__"
                  },
                  "generator": false,
                  "expression": false,
                  "async": false,
                  "params": [
                    {
                      "type": "Identifier",
                      "start": 909,
                      "end": 916,
                      "loc": {
                        "start": {
                          "line": 33,
                          "column": 27
                        },
                        "end": {
                          "line": 33,
                          "column": 34
                        },
                        "identifierName": "strings"
                      },
                      "name": "strings"
                    }
                  ],
                  "body": {
                    "type": "BlockStatement",
                    "start": 918,
                    "end": 962,
                    "loc": {
                      "start": {
                        "line": 33,
                        "column": 36
                      },
                      "end": {
                        "line": 35,
                        "column": 5
                      }
                    },
                    "body": [
                      {
                        "type": "ReturnStatement",
                        "start": 928,
                        "end": 956,
                        "loc": {
                          "start": {
                            "line": 34,
                            "column": 8
                          },
                          "end": {
                            "line": 34,
                            "column": 36
                          }
                        },
                        "argument": {
                          "type": "CallExpression",
                          "start": 935,
                          "end": 955,
                          "loc": {
                            "start": {
                              "line": 34,
                              "column": 15
                            },
                            "end": {
                              "line": 34,
                              "column": 35
                            }
                          },
                          "callee": {
                            "type": "MemberExpression",
                            "start": 935,
                            "end": 947,
                            "loc": {
                              "start": {
                                "line": 34,
                                "column": 15
                              },
                              "end": {
                                "line": 34,
                                "column": 27
                              }
                            },
                            "object": {
                              "type": "Identifier",
                              "start": 935,
                              "end": 942,
                              "loc": {
                                "start": {
                                  "line": 34,
                                  "column": 15
                                },
                                "end": {
                                  "line": 34,
                                  "column": 22
                                },
                                "identifierName": "strings"
                              },
                              "name": "strings"
                            },
                            "property": {
                              "type": "Identifier",
                              "start": 943,
                              "end": 947,
                              "loc": {
                                "start": {
                                  "line": 34,
                                  "column": 23
                                },
                                "end": {
                                  "line": 34,
                                  "column": 27
                                },
                                "identifierName": "join"
                              },
                              "name": "join"
                            },
                            "computed": false
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "start": 948,
                              "end": 954,
                              "loc": {
                                "start": {
                                  "line": 34,
                                  "column": 28
                                },
                                "end": {
                                  "line": 34,
                                  "column": 34
                                },
                                "identifierName": "joiner"
                              },
                              "name": "joiner"
                            }
                          ]
                        }
                      }
                    ],
                    "directives": []
                  }
                }
              }
            ],
            "directives": [],
            "trailingComments": null
          },
          "leadingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * @desc\n * undefined\n * @lineNumber\n * 24\n * @param\n * {string} joiner\n ",
              "start": 0,
              "end": 79,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 0
                },
                "end": {
                  "line": 8,
                  "column": 3
                }
              }
            },
            {
              "type": "CommentBlock",
              "value": "*\n * @desc\n * Condensation of a list of strings into a single\n * string using a specific separator of type string.\n * This separator is not optional and has no default.\n *\n * If you use this function with a singleton array,\n * the result will be the only string it contains.\n * Whereas an empty array will produce an empty string.\n * @example\n * const listify = join(\", \");\n *\n * listify([\"Poe\", \"Lovecraft\", \"King\"]);\n * //> \"Poe, Lovecraft, King\"\n *\n * join(\" - \")([\"Singleton\"]); //> \"Singleton\"\n * join(\" <> \")([]); //> \"\"\n * @todo Let the user specify the first and last separators.\n * @see {@link split}\n * @param {string} joiner - The string separator.\n * @return {function(strings: string[]): string}\n * The joiner function that receives a list of strings.\n ",
              "start": 80,
              "end": 850,
              "loc": {
                "start": {
                  "line": 9,
                  "column": 0
                },
                "end": {
                  "line": 31,
                  "column": 3
                }
              }
            }
          ],
          "trailingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * @desc\n * undefined\n * @lineNumber\n * 54\n * @param\n * {undefined} lines\n * @return\n * {string}\n ",
              "start": 966,
              "end": 1070,
              "loc": {
                "start": {
                  "line": 37,
                  "column": 0
                },
                "end": {
                  "line": 46,
                  "column": 3
                }
              }
            },
            {
              "type": "CommentBlock",
              "value": "*\n * @desc\n * Takes a list of strings and joins them using a new-line\n * character `\\n`. If it finds **adjacent empty strings**,\n * the function **will not** condense them into a single\n * new-line character; this behaviour can't be changed.\n * @example\n * const haiku: string[] = [\n *   \"The lamp once out\"\n *   \"Cool stars enter\"\n *   \"The window frame.\"\n * ];\n *\n * unlines(haiku);\n * //> \"The lamp once out\\n\n * //>  Cool stars enter\\n\n * //>  The window frame.\"\n *\n * unlines([\"One\"]); //> \"One\"\n * unlines([]); //> \"\"\n * @see {@link lines}\n * @param {string[]} lines - The array of lines to join.\n * @return {string}        - A string containing all the lines.\n ",
              "start": 1071,
              "end": 1743,
              "loc": {
                "start": {
                  "line": 47,
                  "column": 0
                },
                "end": {
                  "line": 70,
                  "column": 3
                }
              }
            }
          ]
        },
        "leadingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * @desc\n * undefined\n * @lineNumber\n * 24\n * @param\n * {string} joiner\n ",
            "start": 0,
            "end": 79,
            "loc": {
              "start": {
                "line": 1,
                "column": 0
              },
              "end": {
                "line": 8,
                "column": 3
              }
            }
          },
          {
            "type": "CommentBlock",
            "value": "*\n * @desc\n * Condensation of a list of strings into a single\n * string using a specific separator of type string.\n * This separator is not optional and has no default.\n *\n * If you use this function with a singleton array,\n * the result will be the only string it contains.\n * Whereas an empty array will produce an empty string.\n * @example\n * const listify = join(\", \");\n *\n * listify([\"Poe\", \"Lovecraft\", \"King\"]);\n * //> \"Poe, Lovecraft, King\"\n *\n * join(\" - \")([\"Singleton\"]); //> \"Singleton\"\n * join(\" <> \")([]); //> \"\"\n * @todo Let the user specify the first and last separators.\n * @see {@link split}\n * @param {string} joiner - The string separator.\n * @return {function(strings: string[]): string}\n * The joiner function that receives a list of strings.\n ",
            "start": 80,
            "end": 850,
            "loc": {
              "start": {
                "line": 9,
                "column": 0
              },
              "end": {
                "line": 31,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * @desc\n * undefined\n * @lineNumber\n * 54\n * @param\n * {undefined} lines\n * @return\n * {string}\n ",
            "start": 966,
            "end": 1070,
            "loc": {
              "start": {
                "line": 37,
                "column": 0
              },
              "end": {
                "line": 46,
                "column": 3
              }
            }
          },
          {
            "type": "CommentBlock",
            "value": "*\n * @desc\n * Takes a list of strings and joins them using a new-line\n * character `\\n`. If it finds **adjacent empty strings**,\n * the function **will not** condense them into a single\n * new-line character; this behaviour can't be changed.\n * @example\n * const haiku: string[] = [\n *   \"The lamp once out\"\n *   \"Cool stars enter\"\n *   \"The window frame.\"\n * ];\n *\n * unlines(haiku);\n * //> \"The lamp once out\\n\n * //>  Cool stars enter\\n\n * //>  The window frame.\"\n *\n * unlines([\"One\"]); //> \"One\"\n * unlines([]); //> \"\"\n * @see {@link lines}\n * @param {string[]} lines - The array of lines to join.\n * @return {string}        - A string containing all the lines.\n ",
            "start": 1071,
            "end": 1743,
            "loc": {
              "start": {
                "line": 47,
                "column": 0
              },
              "end": {
                "line": 70,
                "column": 3
              }
            }
          }
        ]
      },
      {
        "type": "ExportNamedDeclaration",
        "start": 1744,
        "end": 1808,
        "loc": {
          "start": {
            "line": 71,
            "column": 0
          },
          "end": {
            "line": 73,
            "column": 1
          }
        },
        "specifiers": [],
        "source": null,
        "declaration": {
          "type": "FunctionDeclaration",
          "start": 1751,
          "end": 1808,
          "loc": {
            "start": {
              "line": 71,
              "column": 7
            },
            "end": {
              "line": 73,
              "column": 1
            }
          },
          "id": {
            "type": "Identifier",
            "start": 1760,
            "end": 1767,
            "loc": {
              "start": {
                "line": 71,
                "column": 16
              },
              "end": {
                "line": 71,
                "column": 23
              },
              "identifierName": "unlines"
            },
            "name": "unlines",
            "leadingComments": null
          },
          "generator": false,
          "expression": false,
          "async": false,
          "params": [
            {
              "type": "Identifier",
              "start": 1768,
              "end": 1773,
              "loc": {
                "start": {
                  "line": 71,
                  "column": 24
                },
                "end": {
                  "line": 71,
                  "column": 29
                },
                "identifierName": "lines"
              },
              "name": "lines"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "start": 1775,
            "end": 1808,
            "loc": {
              "start": {
                "line": 71,
                "column": 31
              },
              "end": {
                "line": 73,
                "column": 1
              }
            },
            "body": [
              {
                "type": "ReturnStatement",
                "start": 1781,
                "end": 1806,
                "loc": {
                  "start": {
                    "line": 72,
                    "column": 4
                  },
                  "end": {
                    "line": 72,
                    "column": 29
                  }
                },
                "argument": {
                  "type": "CallExpression",
                  "start": 1788,
                  "end": 1805,
                  "loc": {
                    "start": {
                      "line": 72,
                      "column": 11
                    },
                    "end": {
                      "line": 72,
                      "column": 28
                    }
                  },
                  "callee": {
                    "type": "CallExpression",
                    "start": 1788,
                    "end": 1798,
                    "loc": {
                      "start": {
                        "line": 72,
                        "column": 11
                      },
                      "end": {
                        "line": 72,
                        "column": 21
                      }
                    },
                    "callee": {
                      "type": "Identifier",
                      "start": 1788,
                      "end": 1792,
                      "loc": {
                        "start": {
                          "line": 72,
                          "column": 11
                        },
                        "end": {
                          "line": 72,
                          "column": 15
                        },
                        "identifierName": "join"
                      },
                      "name": "join"
                    },
                    "arguments": [
                      {
                        "type": "StringLiteral",
                        "start": 1793,
                        "end": 1797,
                        "loc": {
                          "start": {
                            "line": 72,
                            "column": 16
                          },
                          "end": {
                            "line": 72,
                            "column": 20
                          }
                        },
                        "extra": {
                          "rawValue": "\n",
                          "raw": "\"\\n\""
                        },
                        "value": "\n"
                      }
                    ]
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "start": 1799,
                      "end": 1804,
                      "loc": {
                        "start": {
                          "line": 72,
                          "column": 22
                        },
                        "end": {
                          "line": 72,
                          "column": 27
                        },
                        "identifierName": "lines"
                      },
                      "name": "lines"
                    }
                  ]
                }
              }
            ],
            "directives": [],
            "trailingComments": null
          },
          "leadingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * @desc\n * undefined\n * @lineNumber\n * 54\n * @param\n * {undefined} lines\n * @return\n * {string}\n ",
              "start": 966,
              "end": 1070,
              "loc": {
                "start": {
                  "line": 37,
                  "column": 0
                },
                "end": {
                  "line": 46,
                  "column": 3
                }
              }
            },
            {
              "type": "CommentBlock",
              "value": "*\n * @desc\n * Takes a list of strings and joins them using a new-line\n * character `\\n`. If it finds **adjacent empty strings**,\n * the function **will not** condense them into a single\n * new-line character; this behaviour can't be changed.\n * @example\n * const haiku: string[] = [\n *   \"The lamp once out\"\n *   \"Cool stars enter\"\n *   \"The window frame.\"\n * ];\n *\n * unlines(haiku);\n * //> \"The lamp once out\\n\n * //>  Cool stars enter\\n\n * //>  The window frame.\"\n *\n * unlines([\"One\"]); //> \"One\"\n * unlines([]); //> \"\"\n * @see {@link lines}\n * @param {string[]} lines - The array of lines to join.\n * @return {string}        - A string containing all the lines.\n ",
              "start": 1071,
              "end": 1743,
              "loc": {
                "start": {
                  "line": 47,
                  "column": 0
                },
                "end": {
                  "line": 70,
                  "column": 3
                }
              }
            }
          ],
          "trailingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * @desc\n * undefined\n * @lineNumber\n * 76\n * @param\n * {undefined} words\n * @return\n * {string}\n ",
              "start": 1809,
              "end": 1913,
              "loc": {
                "start": {
                  "line": 74,
                  "column": 0
                },
                "end": {
                  "line": 83,
                  "column": 3
                }
              }
            },
            {
              "type": "CommentBlock",
              "value": "*\n * @desc\n * Takes a list of strings and joins them using a space character.\n * If it finds **adjacent empty strings**, this function won't\n * condense them into a single space, but rather convert each\n * one into a space; this behaviour can't be changed.\n * @example\n * unwords([\"The\", \"Quick\", \"Brown\", \"Fox\"]);\n * //> \"The Quick Brown Fox\"\n *\n * unwords([\"Alone\"]); //> \"Alone\"\n *\n * unwords([\"\", \"\", \"Trailing\", \"\", \"Space\"]);\n * //> \"  Trailing  Space\"\n * @see {@link words}\n * @param {string[]} words - The array of words to join.\n * @return {string}        - A string containing all the words.\n ",
              "start": 1914,
              "end": 2521,
              "loc": {
                "start": {
                  "line": 84,
                  "column": 0
                },
                "end": {
                  "line": 101,
                  "column": 3
                }
              }
            }
          ]
        },
        "leadingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * @desc\n * undefined\n * @lineNumber\n * 54\n * @param\n * {undefined} lines\n * @return\n * {string}\n ",
            "start": 966,
            "end": 1070,
            "loc": {
              "start": {
                "line": 37,
                "column": 0
              },
              "end": {
                "line": 46,
                "column": 3
              }
            }
          },
          {
            "type": "CommentBlock",
            "value": "*\n * @desc\n * Takes a list of strings and joins them using a new-line\n * character `\\n`. If it finds **adjacent empty strings**,\n * the function **will not** condense them into a single\n * new-line character; this behaviour can't be changed.\n * @example\n * const haiku: string[] = [\n *   \"The lamp once out\"\n *   \"Cool stars enter\"\n *   \"The window frame.\"\n * ];\n *\n * unlines(haiku);\n * //> \"The lamp once out\\n\n * //>  Cool stars enter\\n\n * //>  The window frame.\"\n *\n * unlines([\"One\"]); //> \"One\"\n * unlines([]); //> \"\"\n * @see {@link lines}\n * @param {string[]} lines - The array of lines to join.\n * @return {string}        - A string containing all the lines.\n ",
            "start": 1071,
            "end": 1743,
            "loc": {
              "start": {
                "line": 47,
                "column": 0
              },
              "end": {
                "line": 70,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * @desc\n * undefined\n * @lineNumber\n * 76\n * @param\n * {undefined} words\n * @return\n * {string}\n ",
            "start": 1809,
            "end": 1913,
            "loc": {
              "start": {
                "line": 74,
                "column": 0
              },
              "end": {
                "line": 83,
                "column": 3
              }
            }
          },
          {
            "type": "CommentBlock",
            "value": "*\n * @desc\n * Takes a list of strings and joins them using a space character.\n * If it finds **adjacent empty strings**, this function won't\n * condense them into a single space, but rather convert each\n * one into a space; this behaviour can't be changed.\n * @example\n * unwords([\"The\", \"Quick\", \"Brown\", \"Fox\"]);\n * //> \"The Quick Brown Fox\"\n *\n * unwords([\"Alone\"]); //> \"Alone\"\n *\n * unwords([\"\", \"\", \"Trailing\", \"\", \"Space\"]);\n * //> \"  Trailing  Space\"\n * @see {@link words}\n * @param {string[]} words - The array of words to join.\n * @return {string}        - A string containing all the words.\n ",
            "start": 1914,
            "end": 2521,
            "loc": {
              "start": {
                "line": 84,
                "column": 0
              },
              "end": {
                "line": 101,
                "column": 3
              }
            }
          }
        ]
      },
      {
        "type": "ExportNamedDeclaration",
        "start": 2522,
        "end": 2585,
        "loc": {
          "start": {
            "line": 102,
            "column": 0
          },
          "end": {
            "line": 104,
            "column": 1
          }
        },
        "specifiers": [],
        "source": null,
        "declaration": {
          "type": "FunctionDeclaration",
          "start": 2529,
          "end": 2585,
          "loc": {
            "start": {
              "line": 102,
              "column": 7
            },
            "end": {
              "line": 104,
              "column": 1
            }
          },
          "id": {
            "type": "Identifier",
            "start": 2538,
            "end": 2545,
            "loc": {
              "start": {
                "line": 102,
                "column": 16
              },
              "end": {
                "line": 102,
                "column": 23
              },
              "identifierName": "unwords"
            },
            "name": "unwords",
            "leadingComments": null
          },
          "generator": false,
          "expression": false,
          "async": false,
          "params": [
            {
              "type": "Identifier",
              "start": 2546,
              "end": 2551,
              "loc": {
                "start": {
                  "line": 102,
                  "column": 24
                },
                "end": {
                  "line": 102,
                  "column": 29
                },
                "identifierName": "words"
              },
              "name": "words"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "start": 2553,
            "end": 2585,
            "loc": {
              "start": {
                "line": 102,
                "column": 31
              },
              "end": {
                "line": 104,
                "column": 1
              }
            },
            "body": [
              {
                "type": "ReturnStatement",
                "start": 2559,
                "end": 2583,
                "loc": {
                  "start": {
                    "line": 103,
                    "column": 4
                  },
                  "end": {
                    "line": 103,
                    "column": 28
                  }
                },
                "argument": {
                  "type": "CallExpression",
                  "start": 2566,
                  "end": 2582,
                  "loc": {
                    "start": {
                      "line": 103,
                      "column": 11
                    },
                    "end": {
                      "line": 103,
                      "column": 27
                    }
                  },
                  "callee": {
                    "type": "CallExpression",
                    "start": 2566,
                    "end": 2575,
                    "loc": {
                      "start": {
                        "line": 103,
                        "column": 11
                      },
                      "end": {
                        "line": 103,
                        "column": 20
                      }
                    },
                    "callee": {
                      "type": "Identifier",
                      "start": 2566,
                      "end": 2570,
                      "loc": {
                        "start": {
                          "line": 103,
                          "column": 11
                        },
                        "end": {
                          "line": 103,
                          "column": 15
                        },
                        "identifierName": "join"
                      },
                      "name": "join"
                    },
                    "arguments": [
                      {
                        "type": "StringLiteral",
                        "start": 2571,
                        "end": 2574,
                        "loc": {
                          "start": {
                            "line": 103,
                            "column": 16
                          },
                          "end": {
                            "line": 103,
                            "column": 19
                          }
                        },
                        "extra": {
                          "rawValue": " ",
                          "raw": "\" \""
                        },
                        "value": " "
                      }
                    ]
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "start": 2576,
                      "end": 2581,
                      "loc": {
                        "start": {
                          "line": 103,
                          "column": 21
                        },
                        "end": {
                          "line": 103,
                          "column": 26
                        },
                        "identifierName": "words"
                      },
                      "name": "words"
                    }
                  ]
                }
              }
            ],
            "directives": [],
            "trailingComments": null
          },
          "leadingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * @desc\n * undefined\n * @lineNumber\n * 76\n * @param\n * {undefined} words\n * @return\n * {string}\n ",
              "start": 1809,
              "end": 1913,
              "loc": {
                "start": {
                  "line": 74,
                  "column": 0
                },
                "end": {
                  "line": 83,
                  "column": 3
                }
              }
            },
            {
              "type": "CommentBlock",
              "value": "*\n * @desc\n * Takes a list of strings and joins them using a space character.\n * If it finds **adjacent empty strings**, this function won't\n * condense them into a single space, but rather convert each\n * one into a space; this behaviour can't be changed.\n * @example\n * unwords([\"The\", \"Quick\", \"Brown\", \"Fox\"]);\n * //> \"The Quick Brown Fox\"\n *\n * unwords([\"Alone\"]); //> \"Alone\"\n *\n * unwords([\"\", \"\", \"Trailing\", \"\", \"Space\"]);\n * //> \"  Trailing  Space\"\n * @see {@link words}\n * @param {string[]} words - The array of words to join.\n * @return {string}        - A string containing all the words.\n ",
              "start": 1914,
              "end": 2521,
              "loc": {
                "start": {
                  "line": 84,
                  "column": 0
                },
                "end": {
                  "line": 101,
                  "column": 3
                }
              }
            }
          ],
          "trailingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * @desc\n * undefined\n * @lineNumber\n * 96\n * @param\n * {undefined} chars\n * @return\n * {string}\n ",
              "start": 2586,
              "end": 2690,
              "loc": {
                "start": {
                  "line": 105,
                  "column": 0
                },
                "end": {
                  "line": 114,
                  "column": 3
                }
              }
            },
            {
              "type": "CommentBlock",
              "value": "*\n * @desc\n * Takes a list of characters and joins them into a string.\n * @example\n * unchars([\"A\", \"B\", \"C\"]); //> \"ABC\"\n * unchars([\"A\"]); //> \"A\"\n * unchars([]); //> \"\"\n *\n * // However, it doesn't only work\n * // on single-character strings...\n * unchars([\"The\", \"Beatles\"]);\n * //> \"TheBeatles\"\n * @see {@link chars}\n * @param {string[]} chars - The array of characters to join.\n * @return {string}        - A string containing all the characters.\n ",
              "start": 2691,
              "end": 3149,
              "loc": {
                "start": {
                  "line": 115,
                  "column": 0
                },
                "end": {
                  "line": 130,
                  "column": 3
                }
              }
            }
          ]
        },
        "leadingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * @desc\n * undefined\n * @lineNumber\n * 76\n * @param\n * {undefined} words\n * @return\n * {string}\n ",
            "start": 1809,
            "end": 1913,
            "loc": {
              "start": {
                "line": 74,
                "column": 0
              },
              "end": {
                "line": 83,
                "column": 3
              }
            }
          },
          {
            "type": "CommentBlock",
            "value": "*\n * @desc\n * Takes a list of strings and joins them using a space character.\n * If it finds **adjacent empty strings**, this function won't\n * condense them into a single space, but rather convert each\n * one into a space; this behaviour can't be changed.\n * @example\n * unwords([\"The\", \"Quick\", \"Brown\", \"Fox\"]);\n * //> \"The Quick Brown Fox\"\n *\n * unwords([\"Alone\"]); //> \"Alone\"\n *\n * unwords([\"\", \"\", \"Trailing\", \"\", \"Space\"]);\n * //> \"  Trailing  Space\"\n * @see {@link words}\n * @param {string[]} words - The array of words to join.\n * @return {string}        - A string containing all the words.\n ",
            "start": 1914,
            "end": 2521,
            "loc": {
              "start": {
                "line": 84,
                "column": 0
              },
              "end": {
                "line": 101,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * @desc\n * undefined\n * @lineNumber\n * 96\n * @param\n * {undefined} chars\n * @return\n * {string}\n ",
            "start": 2586,
            "end": 2690,
            "loc": {
              "start": {
                "line": 105,
                "column": 0
              },
              "end": {
                "line": 114,
                "column": 3
              }
            }
          },
          {
            "type": "CommentBlock",
            "value": "*\n * @desc\n * Takes a list of characters and joins them into a string.\n * @example\n * unchars([\"A\", \"B\", \"C\"]); //> \"ABC\"\n * unchars([\"A\"]); //> \"A\"\n * unchars([]); //> \"\"\n *\n * // However, it doesn't only work\n * // on single-character strings...\n * unchars([\"The\", \"Beatles\"]);\n * //> \"TheBeatles\"\n * @see {@link chars}\n * @param {string[]} chars - The array of characters to join.\n * @return {string}        - A string containing all the characters.\n ",
            "start": 2691,
            "end": 3149,
            "loc": {
              "start": {
                "line": 115,
                "column": 0
              },
              "end": {
                "line": 130,
                "column": 3
              }
            }
          }
        ]
      },
      {
        "type": "ExportNamedDeclaration",
        "start": 3150,
        "end": 3212,
        "loc": {
          "start": {
            "line": 131,
            "column": 0
          },
          "end": {
            "line": 133,
            "column": 1
          }
        },
        "specifiers": [],
        "source": null,
        "declaration": {
          "type": "FunctionDeclaration",
          "start": 3157,
          "end": 3212,
          "loc": {
            "start": {
              "line": 131,
              "column": 7
            },
            "end": {
              "line": 133,
              "column": 1
            }
          },
          "id": {
            "type": "Identifier",
            "start": 3166,
            "end": 3173,
            "loc": {
              "start": {
                "line": 131,
                "column": 16
              },
              "end": {
                "line": 131,
                "column": 23
              },
              "identifierName": "unchars"
            },
            "name": "unchars",
            "leadingComments": null
          },
          "generator": false,
          "expression": false,
          "async": false,
          "params": [
            {
              "type": "Identifier",
              "start": 3174,
              "end": 3179,
              "loc": {
                "start": {
                  "line": 131,
                  "column": 24
                },
                "end": {
                  "line": 131,
                  "column": 29
                },
                "identifierName": "chars"
              },
              "name": "chars"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "start": 3181,
            "end": 3212,
            "loc": {
              "start": {
                "line": 131,
                "column": 31
              },
              "end": {
                "line": 133,
                "column": 1
              }
            },
            "body": [
              {
                "type": "ReturnStatement",
                "start": 3187,
                "end": 3210,
                "loc": {
                  "start": {
                    "line": 132,
                    "column": 4
                  },
                  "end": {
                    "line": 132,
                    "column": 27
                  }
                },
                "argument": {
                  "type": "CallExpression",
                  "start": 3194,
                  "end": 3209,
                  "loc": {
                    "start": {
                      "line": 132,
                      "column": 11
                    },
                    "end": {
                      "line": 132,
                      "column": 26
                    }
                  },
                  "callee": {
                    "type": "CallExpression",
                    "start": 3194,
                    "end": 3202,
                    "loc": {
                      "start": {
                        "line": 132,
                        "column": 11
                      },
                      "end": {
                        "line": 132,
                        "column": 19
                      }
                    },
                    "callee": {
                      "type": "Identifier",
                      "start": 3194,
                      "end": 3198,
                      "loc": {
                        "start": {
                          "line": 132,
                          "column": 11
                        },
                        "end": {
                          "line": 132,
                          "column": 15
                        },
                        "identifierName": "join"
                      },
                      "name": "join"
                    },
                    "arguments": [
                      {
                        "type": "StringLiteral",
                        "start": 3199,
                        "end": 3201,
                        "loc": {
                          "start": {
                            "line": 132,
                            "column": 16
                          },
                          "end": {
                            "line": 132,
                            "column": 18
                          }
                        },
                        "extra": {
                          "rawValue": "",
                          "raw": "\"\""
                        },
                        "value": ""
                      }
                    ]
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "start": 3203,
                      "end": 3208,
                      "loc": {
                        "start": {
                          "line": 132,
                          "column": 20
                        },
                        "end": {
                          "line": 132,
                          "column": 25
                        },
                        "identifierName": "chars"
                      },
                      "name": "chars"
                    }
                  ]
                }
              }
            ],
            "directives": []
          },
          "leadingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * @desc\n * undefined\n * @lineNumber\n * 96\n * @param\n * {undefined} chars\n * @return\n * {string}\n ",
              "start": 2586,
              "end": 2690,
              "loc": {
                "start": {
                  "line": 105,
                  "column": 0
                },
                "end": {
                  "line": 114,
                  "column": 3
                }
              }
            },
            {
              "type": "CommentBlock",
              "value": "*\n * @desc\n * Takes a list of characters and joins them into a string.\n * @example\n * unchars([\"A\", \"B\", \"C\"]); //> \"ABC\"\n * unchars([\"A\"]); //> \"A\"\n * unchars([]); //> \"\"\n *\n * // However, it doesn't only work\n * // on single-character strings...\n * unchars([\"The\", \"Beatles\"]);\n * //> \"TheBeatles\"\n * @see {@link chars}\n * @param {string[]} chars - The array of characters to join.\n * @return {string}        - A string containing all the characters.\n ",
              "start": 2691,
              "end": 3149,
              "loc": {
                "start": {
                  "line": 115,
                  "column": 0
                },
                "end": {
                  "line": 130,
                  "column": 3
                }
              }
            }
          ],
          "trailingComments": []
        },
        "leadingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * @desc\n * undefined\n * @lineNumber\n * 96\n * @param\n * {undefined} chars\n * @return\n * {string}\n ",
            "start": 2586,
            "end": 2690,
            "loc": {
              "start": {
                "line": 105,
                "column": 0
              },
              "end": {
                "line": 114,
                "column": 3
              }
            }
          },
          {
            "type": "CommentBlock",
            "value": "*\n * @desc\n * Takes a list of characters and joins them into a string.\n * @example\n * unchars([\"A\", \"B\", \"C\"]); //> \"ABC\"\n * unchars([\"A\"]); //> \"A\"\n * unchars([]); //> \"\"\n *\n * // However, it doesn't only work\n * // on single-character strings...\n * unchars([\"The\", \"Beatles\"]);\n * //> \"TheBeatles\"\n * @see {@link chars}\n * @param {string[]} chars - The array of characters to join.\n * @return {string}        - A string containing all the characters.\n ",
            "start": 2691,
            "end": 3149,
            "loc": {
              "start": {
                "line": 115,
                "column": 0
              },
              "end": {
                "line": 130,
                "column": 3
              }
            }
          }
        ]
      }
    ],
    "directives": []
  },
  "comments": [
    {
      "type": "CommentBlock",
      "value": "*\n * @desc\n * undefined\n * @lineNumber\n * 24\n * @param\n * {string} joiner\n ",
      "start": 0,
      "end": 79,
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 8,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @desc\n * Condensation of a list of strings into a single\n * string using a specific separator of type string.\n * This separator is not optional and has no default.\n *\n * If you use this function with a singleton array,\n * the result will be the only string it contains.\n * Whereas an empty array will produce an empty string.\n * @example\n * const listify = join(\", \");\n *\n * listify([\"Poe\", \"Lovecraft\", \"King\"]);\n * //> \"Poe, Lovecraft, King\"\n *\n * join(\" - \")([\"Singleton\"]); //> \"Singleton\"\n * join(\" <> \")([]); //> \"\"\n * @todo Let the user specify the first and last separators.\n * @see {@link split}\n * @param {string} joiner - The string separator.\n * @return {function(strings: string[]): string}\n * The joiner function that receives a list of strings.\n ",
      "start": 80,
      "end": 850,
      "loc": {
        "start": {
          "line": 9,
          "column": 0
        },
        "end": {
          "line": 31,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @desc\n * undefined\n * @lineNumber\n * 54\n * @param\n * {undefined} lines\n * @return\n * {string}\n ",
      "start": 966,
      "end": 1070,
      "loc": {
        "start": {
          "line": 37,
          "column": 0
        },
        "end": {
          "line": 46,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @desc\n * Takes a list of strings and joins them using a new-line\n * character `\\n`. If it finds **adjacent empty strings**,\n * the function **will not** condense them into a single\n * new-line character; this behaviour can't be changed.\n * @example\n * const haiku: string[] = [\n *   \"The lamp once out\"\n *   \"Cool stars enter\"\n *   \"The window frame.\"\n * ];\n *\n * unlines(haiku);\n * //> \"The lamp once out\\n\n * //>  Cool stars enter\\n\n * //>  The window frame.\"\n *\n * unlines([\"One\"]); //> \"One\"\n * unlines([]); //> \"\"\n * @see {@link lines}\n * @param {string[]} lines - The array of lines to join.\n * @return {string}        - A string containing all the lines.\n ",
      "start": 1071,
      "end": 1743,
      "loc": {
        "start": {
          "line": 47,
          "column": 0
        },
        "end": {
          "line": 70,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @desc\n * undefined\n * @lineNumber\n * 76\n * @param\n * {undefined} words\n * @return\n * {string}\n ",
      "start": 1809,
      "end": 1913,
      "loc": {
        "start": {
          "line": 74,
          "column": 0
        },
        "end": {
          "line": 83,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @desc\n * Takes a list of strings and joins them using a space character.\n * If it finds **adjacent empty strings**, this function won't\n * condense them into a single space, but rather convert each\n * one into a space; this behaviour can't be changed.\n * @example\n * unwords([\"The\", \"Quick\", \"Brown\", \"Fox\"]);\n * //> \"The Quick Brown Fox\"\n *\n * unwords([\"Alone\"]); //> \"Alone\"\n *\n * unwords([\"\", \"\", \"Trailing\", \"\", \"Space\"]);\n * //> \"  Trailing  Space\"\n * @see {@link words}\n * @param {string[]} words - The array of words to join.\n * @return {string}        - A string containing all the words.\n ",
      "start": 1914,
      "end": 2521,
      "loc": {
        "start": {
          "line": 84,
          "column": 0
        },
        "end": {
          "line": 101,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @desc\n * undefined\n * @lineNumber\n * 96\n * @param\n * {undefined} chars\n * @return\n * {string}\n ",
      "start": 2586,
      "end": 2690,
      "loc": {
        "start": {
          "line": 105,
          "column": 0
        },
        "end": {
          "line": 114,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @desc\n * Takes a list of characters and joins them into a string.\n * @example\n * unchars([\"A\", \"B\", \"C\"]); //> \"ABC\"\n * unchars([\"A\"]); //> \"A\"\n * unchars([]); //> \"\"\n *\n * // However, it doesn't only work\n * // on single-character strings...\n * unchars([\"The\", \"Beatles\"]);\n * //> \"TheBeatles\"\n * @see {@link chars}\n * @param {string[]} chars - The array of characters to join.\n * @return {string}        - A string containing all the characters.\n ",
      "start": 2691,
      "end": 3149,
      "loc": {
        "start": {
          "line": 115,
          "column": 0
        },
        "end": {
          "line": 130,
          "column": 3
        }
      }
    }
  ],
  "tokens": [
    {
      "type": "CommentBlock",
      "value": "*\n * @desc\n * undefined\n * @lineNumber\n * 24\n * @param\n * {string} joiner\n ",
      "start": 0,
      "end": 79,
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 8,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @desc\n * Condensation of a list of strings into a single\n * string using a specific separator of type string.\n * This separator is not optional and has no default.\n *\n * If you use this function with a singleton array,\n * the result will be the only string it contains.\n * Whereas an empty array will produce an empty string.\n * @example\n * const listify = join(\", \");\n *\n * listify([\"Poe\", \"Lovecraft\", \"King\"]);\n * //> \"Poe, Lovecraft, King\"\n *\n * join(\" - \")([\"Singleton\"]); //> \"Singleton\"\n * join(\" <> \")([]); //> \"\"\n * @todo Let the user specify the first and last separators.\n * @see {@link split}\n * @param {string} joiner - The string separator.\n * @return {function(strings: string[]): string}\n * The joiner function that receives a list of strings.\n ",
      "start": 80,
      "end": 850,
      "loc": {
        "start": {
          "line": 9,
          "column": 0
        },
        "end": {
          "line": 31,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "export",
        "keyword": "export",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "export",
      "start": 851,
      "end": 857,
      "loc": {
        "start": {
          "line": 32,
          "column": 0
        },
        "end": {
          "line": 32,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "function",
        "keyword": "function",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "function",
      "start": 858,
      "end": 866,
      "loc": {
        "start": {
          "line": 32,
          "column": 7
        },
        "end": {
          "line": 32,
          "column": 15
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "join",
      "start": 867,
      "end": 871,
      "loc": {
        "start": {
          "line": 32,
          "column": 16
        },
        "end": {
          "line": 32,
          "column": 20
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 871,
      "end": 872,
      "loc": {
        "start": {
          "line": 32,
          "column": 20
        },
        "end": {
          "line": 32,
          "column": 21
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "joiner",
      "start": 872,
      "end": 878,
      "loc": {
        "start": {
          "line": 32,
          "column": 21
        },
        "end": {
          "line": 32,
          "column": 27
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 878,
      "end": 879,
      "loc": {
        "start": {
          "line": 32,
          "column": 27
        },
        "end": {
          "line": 32,
          "column": 28
        }
      }
    },
    {
      "type": {
        "label": "{",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 880,
      "end": 881,
      "loc": {
        "start": {
          "line": 32,
          "column": 29
        },
        "end": {
          "line": 32,
          "column": 30
        }
      }
    },
    {
      "type": {
        "label": "return",
        "keyword": "return",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "return",
      "start": 886,
      "end": 892,
      "loc": {
        "start": {
          "line": 33,
          "column": 4
        },
        "end": {
          "line": 33,
          "column": 10
        }
      }
    },
    {
      "type": {
        "label": "function",
        "keyword": "function",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "function",
      "start": 893,
      "end": 901,
      "loc": {
        "start": {
          "line": 33,
          "column": 11
        },
        "end": {
          "line": 33,
          "column": 19
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "join__",
      "start": 902,
      "end": 908,
      "loc": {
        "start": {
          "line": 33,
          "column": 20
        },
        "end": {
          "line": 33,
          "column": 26
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 908,
      "end": 909,
      "loc": {
        "start": {
          "line": 33,
          "column": 26
        },
        "end": {
          "line": 33,
          "column": 27
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "strings",
      "start": 909,
      "end": 916,
      "loc": {
        "start": {
          "line": 33,
          "column": 27
        },
        "end": {
          "line": 33,
          "column": 34
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 916,
      "end": 917,
      "loc": {
        "start": {
          "line": 33,
          "column": 34
        },
        "end": {
          "line": 33,
          "column": 35
        }
      }
    },
    {
      "type": {
        "label": "{",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 918,
      "end": 919,
      "loc": {
        "start": {
          "line": 33,
          "column": 36
        },
        "end": {
          "line": 33,
          "column": 37
        }
      }
    },
    {
      "type": {
        "label": "return",
        "keyword": "return",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "return",
      "start": 928,
      "end": 934,
      "loc": {
        "start": {
          "line": 34,
          "column": 8
        },
        "end": {
          "line": 34,
          "column": 14
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "strings",
      "start": 935,
      "end": 942,
      "loc": {
        "start": {
          "line": 34,
          "column": 15
        },
        "end": {
          "line": 34,
          "column": 22
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 942,
      "end": 943,
      "loc": {
        "start": {
          "line": 34,
          "column": 22
        },
        "end": {
          "line": 34,
          "column": 23
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "join",
      "start": 943,
      "end": 947,
      "loc": {
        "start": {
          "line": 34,
          "column": 23
        },
        "end": {
          "line": 34,
          "column": 27
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 947,
      "end": 948,
      "loc": {
        "start": {
          "line": 34,
          "column": 27
        },
        "end": {
          "line": 34,
          "column": 28
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "joiner",
      "start": 948,
      "end": 954,
      "loc": {
        "start": {
          "line": 34,
          "column": 28
        },
        "end": {
          "line": 34,
          "column": 34
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 954,
      "end": 955,
      "loc": {
        "start": {
          "line": 34,
          "column": 34
        },
        "end": {
          "line": 34,
          "column": 35
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 955,
      "end": 956,
      "loc": {
        "start": {
          "line": 34,
          "column": 35
        },
        "end": {
          "line": 34,
          "column": 36
        }
      }
    },
    {
      "type": {
        "label": "}",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 961,
      "end": 962,
      "loc": {
        "start": {
          "line": 35,
          "column": 4
        },
        "end": {
          "line": 35,
          "column": 5
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 962,
      "end": 963,
      "loc": {
        "start": {
          "line": 35,
          "column": 5
        },
        "end": {
          "line": 35,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "}",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 964,
      "end": 965,
      "loc": {
        "start": {
          "line": 36,
          "column": 0
        },
        "end": {
          "line": 36,
          "column": 1
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @desc\n * undefined\n * @lineNumber\n * 54\n * @param\n * {undefined} lines\n * @return\n * {string}\n ",
      "start": 966,
      "end": 1070,
      "loc": {
        "start": {
          "line": 37,
          "column": 0
        },
        "end": {
          "line": 46,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @desc\n * Takes a list of strings and joins them using a new-line\n * character `\\n`. If it finds **adjacent empty strings**,\n * the function **will not** condense them into a single\n * new-line character; this behaviour can't be changed.\n * @example\n * const haiku: string[] = [\n *   \"The lamp once out\"\n *   \"Cool stars enter\"\n *   \"The window frame.\"\n * ];\n *\n * unlines(haiku);\n * //> \"The lamp once out\\n\n * //>  Cool stars enter\\n\n * //>  The window frame.\"\n *\n * unlines([\"One\"]); //> \"One\"\n * unlines([]); //> \"\"\n * @see {@link lines}\n * @param {string[]} lines - The array of lines to join.\n * @return {string}        - A string containing all the lines.\n ",
      "start": 1071,
      "end": 1743,
      "loc": {
        "start": {
          "line": 47,
          "column": 0
        },
        "end": {
          "line": 70,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "export",
        "keyword": "export",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "export",
      "start": 1744,
      "end": 1750,
      "loc": {
        "start": {
          "line": 71,
          "column": 0
        },
        "end": {
          "line": 71,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "function",
        "keyword": "function",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "function",
      "start": 1751,
      "end": 1759,
      "loc": {
        "start": {
          "line": 71,
          "column": 7
        },
        "end": {
          "line": 71,
          "column": 15
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "unlines",
      "start": 1760,
      "end": 1767,
      "loc": {
        "start": {
          "line": 71,
          "column": 16
        },
        "end": {
          "line": 71,
          "column": 23
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 1767,
      "end": 1768,
      "loc": {
        "start": {
          "line": 71,
          "column": 23
        },
        "end": {
          "line": 71,
          "column": 24
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "lines",
      "start": 1768,
      "end": 1773,
      "loc": {
        "start": {
          "line": 71,
          "column": 24
        },
        "end": {
          "line": 71,
          "column": 29
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 1773,
      "end": 1774,
      "loc": {
        "start": {
          "line": 71,
          "column": 29
        },
        "end": {
          "line": 71,
          "column": 30
        }
      }
    },
    {
      "type": {
        "label": "{",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 1775,
      "end": 1776,
      "loc": {
        "start": {
          "line": 71,
          "column": 31
        },
        "end": {
          "line": 71,
          "column": 32
        }
      }
    },
    {
      "type": {
        "label": "return",
        "keyword": "return",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "return",
      "start": 1781,
      "end": 1787,
      "loc": {
        "start": {
          "line": 72,
          "column": 4
        },
        "end": {
          "line": 72,
          "column": 10
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "join",
      "start": 1788,
      "end": 1792,
      "loc": {
        "start": {
          "line": 72,
          "column": 11
        },
        "end": {
          "line": 72,
          "column": 15
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 1792,
      "end": 1793,
      "loc": {
        "start": {
          "line": 72,
          "column": 15
        },
        "end": {
          "line": 72,
          "column": 16
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "\n",
      "start": 1793,
      "end": 1797,
      "loc": {
        "start": {
          "line": 72,
          "column": 16
        },
        "end": {
          "line": 72,
          "column": 20
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 1797,
      "end": 1798,
      "loc": {
        "start": {
          "line": 72,
          "column": 20
        },
        "end": {
          "line": 72,
          "column": 21
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 1798,
      "end": 1799,
      "loc": {
        "start": {
          "line": 72,
          "column": 21
        },
        "end": {
          "line": 72,
          "column": 22
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "lines",
      "start": 1799,
      "end": 1804,
      "loc": {
        "start": {
          "line": 72,
          "column": 22
        },
        "end": {
          "line": 72,
          "column": 27
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 1804,
      "end": 1805,
      "loc": {
        "start": {
          "line": 72,
          "column": 27
        },
        "end": {
          "line": 72,
          "column": 28
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 1805,
      "end": 1806,
      "loc": {
        "start": {
          "line": 72,
          "column": 28
        },
        "end": {
          "line": 72,
          "column": 29
        }
      }
    },
    {
      "type": {
        "label": "}",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 1807,
      "end": 1808,
      "loc": {
        "start": {
          "line": 73,
          "column": 0
        },
        "end": {
          "line": 73,
          "column": 1
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @desc\n * undefined\n * @lineNumber\n * 76\n * @param\n * {undefined} words\n * @return\n * {string}\n ",
      "start": 1809,
      "end": 1913,
      "loc": {
        "start": {
          "line": 74,
          "column": 0
        },
        "end": {
          "line": 83,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @desc\n * Takes a list of strings and joins them using a space character.\n * If it finds **adjacent empty strings**, this function won't\n * condense them into a single space, but rather convert each\n * one into a space; this behaviour can't be changed.\n * @example\n * unwords([\"The\", \"Quick\", \"Brown\", \"Fox\"]);\n * //> \"The Quick Brown Fox\"\n *\n * unwords([\"Alone\"]); //> \"Alone\"\n *\n * unwords([\"\", \"\", \"Trailing\", \"\", \"Space\"]);\n * //> \"  Trailing  Space\"\n * @see {@link words}\n * @param {string[]} words - The array of words to join.\n * @return {string}        - A string containing all the words.\n ",
      "start": 1914,
      "end": 2521,
      "loc": {
        "start": {
          "line": 84,
          "column": 0
        },
        "end": {
          "line": 101,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "export",
        "keyword": "export",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "export",
      "start": 2522,
      "end": 2528,
      "loc": {
        "start": {
          "line": 102,
          "column": 0
        },
        "end": {
          "line": 102,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "function",
        "keyword": "function",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "function",
      "start": 2529,
      "end": 2537,
      "loc": {
        "start": {
          "line": 102,
          "column": 7
        },
        "end": {
          "line": 102,
          "column": 15
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "unwords",
      "start": 2538,
      "end": 2545,
      "loc": {
        "start": {
          "line": 102,
          "column": 16
        },
        "end": {
          "line": 102,
          "column": 23
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 2545,
      "end": 2546,
      "loc": {
        "start": {
          "line": 102,
          "column": 23
        },
        "end": {
          "line": 102,
          "column": 24
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "words",
      "start": 2546,
      "end": 2551,
      "loc": {
        "start": {
          "line": 102,
          "column": 24
        },
        "end": {
          "line": 102,
          "column": 29
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 2551,
      "end": 2552,
      "loc": {
        "start": {
          "line": 102,
          "column": 29
        },
        "end": {
          "line": 102,
          "column": 30
        }
      }
    },
    {
      "type": {
        "label": "{",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 2553,
      "end": 2554,
      "loc": {
        "start": {
          "line": 102,
          "column": 31
        },
        "end": {
          "line": 102,
          "column": 32
        }
      }
    },
    {
      "type": {
        "label": "return",
        "keyword": "return",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "return",
      "start": 2559,
      "end": 2565,
      "loc": {
        "start": {
          "line": 103,
          "column": 4
        },
        "end": {
          "line": 103,
          "column": 10
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "join",
      "start": 2566,
      "end": 2570,
      "loc": {
        "start": {
          "line": 103,
          "column": 11
        },
        "end": {
          "line": 103,
          "column": 15
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 2570,
      "end": 2571,
      "loc": {
        "start": {
          "line": 103,
          "column": 15
        },
        "end": {
          "line": 103,
          "column": 16
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": " ",
      "start": 2571,
      "end": 2574,
      "loc": {
        "start": {
          "line": 103,
          "column": 16
        },
        "end": {
          "line": 103,
          "column": 19
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 2574,
      "end": 2575,
      "loc": {
        "start": {
          "line": 103,
          "column": 19
        },
        "end": {
          "line": 103,
          "column": 20
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 2575,
      "end": 2576,
      "loc": {
        "start": {
          "line": 103,
          "column": 20
        },
        "end": {
          "line": 103,
          "column": 21
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "words",
      "start": 2576,
      "end": 2581,
      "loc": {
        "start": {
          "line": 103,
          "column": 21
        },
        "end": {
          "line": 103,
          "column": 26
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 2581,
      "end": 2582,
      "loc": {
        "start": {
          "line": 103,
          "column": 26
        },
        "end": {
          "line": 103,
          "column": 27
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 2582,
      "end": 2583,
      "loc": {
        "start": {
          "line": 103,
          "column": 27
        },
        "end": {
          "line": 103,
          "column": 28
        }
      }
    },
    {
      "type": {
        "label": "}",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 2584,
      "end": 2585,
      "loc": {
        "start": {
          "line": 104,
          "column": 0
        },
        "end": {
          "line": 104,
          "column": 1
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @desc\n * undefined\n * @lineNumber\n * 96\n * @param\n * {undefined} chars\n * @return\n * {string}\n ",
      "start": 2586,
      "end": 2690,
      "loc": {
        "start": {
          "line": 105,
          "column": 0
        },
        "end": {
          "line": 114,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @desc\n * Takes a list of characters and joins them into a string.\n * @example\n * unchars([\"A\", \"B\", \"C\"]); //> \"ABC\"\n * unchars([\"A\"]); //> \"A\"\n * unchars([]); //> \"\"\n *\n * // However, it doesn't only work\n * // on single-character strings...\n * unchars([\"The\", \"Beatles\"]);\n * //> \"TheBeatles\"\n * @see {@link chars}\n * @param {string[]} chars - The array of characters to join.\n * @return {string}        - A string containing all the characters.\n ",
      "start": 2691,
      "end": 3149,
      "loc": {
        "start": {
          "line": 115,
          "column": 0
        },
        "end": {
          "line": 130,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "export",
        "keyword": "export",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "export",
      "start": 3150,
      "end": 3156,
      "loc": {
        "start": {
          "line": 131,
          "column": 0
        },
        "end": {
          "line": 131,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "function",
        "keyword": "function",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "function",
      "start": 3157,
      "end": 3165,
      "loc": {
        "start": {
          "line": 131,
          "column": 7
        },
        "end": {
          "line": 131,
          "column": 15
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "unchars",
      "start": 3166,
      "end": 3173,
      "loc": {
        "start": {
          "line": 131,
          "column": 16
        },
        "end": {
          "line": 131,
          "column": 23
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 3173,
      "end": 3174,
      "loc": {
        "start": {
          "line": 131,
          "column": 23
        },
        "end": {
          "line": 131,
          "column": 24
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "chars",
      "start": 3174,
      "end": 3179,
      "loc": {
        "start": {
          "line": 131,
          "column": 24
        },
        "end": {
          "line": 131,
          "column": 29
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 3179,
      "end": 3180,
      "loc": {
        "start": {
          "line": 131,
          "column": 29
        },
        "end": {
          "line": 131,
          "column": 30
        }
      }
    },
    {
      "type": {
        "label": "{",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 3181,
      "end": 3182,
      "loc": {
        "start": {
          "line": 131,
          "column": 31
        },
        "end": {
          "line": 131,
          "column": 32
        }
      }
    },
    {
      "type": {
        "label": "return",
        "keyword": "return",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "return",
      "start": 3187,
      "end": 3193,
      "loc": {
        "start": {
          "line": 132,
          "column": 4
        },
        "end": {
          "line": 132,
          "column": 10
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "join",
      "start": 3194,
      "end": 3198,
      "loc": {
        "start": {
          "line": 132,
          "column": 11
        },
        "end": {
          "line": 132,
          "column": 15
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 3198,
      "end": 3199,
      "loc": {
        "start": {
          "line": 132,
          "column": 15
        },
        "end": {
          "line": 132,
          "column": 16
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "",
      "start": 3199,
      "end": 3201,
      "loc": {
        "start": {
          "line": 132,
          "column": 16
        },
        "end": {
          "line": 132,
          "column": 18
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 3201,
      "end": 3202,
      "loc": {
        "start": {
          "line": 132,
          "column": 18
        },
        "end": {
          "line": 132,
          "column": 19
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 3202,
      "end": 3203,
      "loc": {
        "start": {
          "line": 132,
          "column": 19
        },
        "end": {
          "line": 132,
          "column": 20
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "chars",
      "start": 3203,
      "end": 3208,
      "loc": {
        "start": {
          "line": 132,
          "column": 20
        },
        "end": {
          "line": 132,
          "column": 25
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 3208,
      "end": 3209,
      "loc": {
        "start": {
          "line": 132,
          "column": 25
        },
        "end": {
          "line": 132,
          "column": 26
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 3209,
      "end": 3210,
      "loc": {
        "start": {
          "line": 132,
          "column": 26
        },
        "end": {
          "line": 132,
          "column": 27
        }
      }
    },
    {
      "type": {
        "label": "}",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 3211,
      "end": 3212,
      "loc": {
        "start": {
          "line": 133,
          "column": 0
        },
        "end": {
          "line": 133,
          "column": 1
        }
      }
    },
    {
      "type": {
        "label": "eof",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 3213,
      "end": 3213,
      "loc": {
        "start": {
          "line": 134,
          "column": 0
        },
        "end": {
          "line": 134,
          "column": 0
        }
      }
    }
  ]
}